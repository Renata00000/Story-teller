{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Renata00000/Story-teller/blob/main/Chat%20bot\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "CvKeO445uhmz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "07e5dbf4-53c0-46ad-e064-b9021a9148b2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: termcolor in /usr/local/lib/python3.10/dist-packages (2.4.0)\n",
            "Requirement already satisfied: pyfiglet in /usr/local/lib/python3.10/dist-packages (1.0.2)\n",
            "Requirement already satisfied: termcolor in /usr/local/lib/python3.10/dist-packages (2.4.0)\n"
          ]
        }
      ],
      "source": [
        "#instalando o JDK do google\n",
        "!pip install -q -U google-generativeai\n",
        "!pip install termcolor pyfiglet\n",
        "!pip install termcolor"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "iqLIYNHhuyl9"
      },
      "outputs": [],
      "source": [
        "import google.generativeai as genai\n",
        "from termcolor import colored\n",
        "import pyfiglet\n",
        "\n",
        "GOOGLE_API_KEY=('COLE AQUI SUA KEY')\n",
        "genai.configure(api_key=GOOGLE_API_KEY)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "VckT3JcJvSkl",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 142
        },
        "outputId": "74fea9ec-0aee-474e-f0c9-49681893d38d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "models/gemini-1.0-pro\n",
            "models/gemini-1.0-pro-001\n",
            "models/gemini-1.0-pro-latest\n",
            "models/gemini-1.0-pro-vision-latest\n",
            "models/gemini-1.5-pro-latest\n",
            "models/gemini-pro\n",
            "models/gemini-pro-vision\n"
          ]
        }
      ],
      "source": [
        "# listando modelos disponiveis.. versao que tenham  generateContent\n",
        "for m in genai.list_models():\n",
        "  if 'generateContent' in m.supported_generation_methods:  # verifica se m contem generateContent\n",
        "    print(m.name)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "3RHOTCW7vigk"
      },
      "outputs": [],
      "source": [
        "generation_config = {\n",
        "    'candidate_count': 1,\n",
        "    'temperature': 0.5,       # Temperatura moderada\n",
        "    'max_output_tokens': 80,  # Limita o tamanho das respostas\n",
        "    'top_k': 20,              # Explora um conjunto menor de palavras\n",
        "    'top_p': 0.8              # Probabilidade acumulada para as palavras\n",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "tJNW1LYhvo6c"
      },
      "outputs": [],
      "source": [
        "safety_settings = {\n",
        "    'HARASSMENT': 'BLOCK_NONE',\n",
        "    'HATE': 'BLOCK_NONE',\n",
        "    'SEXUALLY_EXPLICIT': 'BLOCK_NONE',\n",
        "}\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "rLaMO89yvx4I"
      },
      "outputs": [],
      "source": [
        "model = genai.GenerativeModel(model_name='gemini-1.0-pro',\n",
        "                        generation_config=generation_config,\n",
        "                        safety_settings=safety_settings)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "WLY9onO-Eejs"
      },
      "outputs": [],
      "source": [
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "o9dQisaxwg3L"
      },
      "outputs": [],
      "source": [
        "# Fun√ß√£o para gerar texto com o modelo (atualizada)\n",
        "def gerar_texto(ultima_frase):\n",
        "    model = genai.GenerativeModel(model_name='gemini-1.0-pro')\n",
        "    response = model.generate_content(ultima_frase)\n",
        "    return response.text\n",
        "\n",
        "# Fun√ß√£o para criar a hist√≥ria interativa\n",
        "def criar_historia():\n",
        "    print(colored(\"üåü Vamos criar uma hist√≥ria fant√°stica juntos! ‚ú®\", 'magenta'))\n",
        "    nome_personagem = input(colored(\"Personage: Qual o nome do nosso her√≥i ou hero√≠na? ü¶∏‚Äç‚ôÄÔ∏èü¶∏‚Äç‚ôÇÔ∏è \", 'blue'))\n",
        "    descricao_personagem = input(f\"Que criatura m√°gica √© {nome_personagem}? ü¶Ñüêâüßô‚Äç‚ôÄÔ∏è \")\n",
        "    lugar_magico = input(colored(\"Para qual reino m√°gico ele vai viajar? üèûÔ∏è‚ú® \", 'green'))\n",
        "    historia = f\"**Hist√≥ria:** Era uma vez, {nome_personagem}, que era {descricao_personagem} e viajou para o m√°gico mundo de {lugar_magico}. **Continua...**\"\n",
        "    ultima_frase = historia\n",
        "    num_criancas = int(input(\"Quantas crian√ßas v√£o participar dessa aventura? üßíüëß \"))\n",
        "    nomes_criancas = []\n",
        "    for i in range(num_criancas):\n",
        "        nome_crianca = input(f\"Qual o nome da crian√ßa {i+1}? \")\n",
        "        nomes_criancas.append(nome_crianca)\n",
        "    i = 0\n",
        "    while True:\n",
        "        titulo = pyfiglet.figlet_format(nomes_criancas[i])\n",
        "        contribuicao = colored(input(f\"{titulo} ü™Ñ O que acontece nesta aventura m√°gica? \"), 'green')\n",
        "        if contribuicao.lower() == 'fim':\n",
        "            break\n",
        "        # Mant√©m a frase inicial e adiciona a √∫ltima contribui√ß√£o\n",
        "        ultima_frase += f\" {contribuicao} E ent√£o...\"\n",
        "        nova_parte = gerar_texto(ultima_frase)\n",
        "        print(colored(\"-\" * 20, 'cyan'))\n",
        "        print(nova_parte)\n",
        "        print(colored(\"-\" * 20, 'cyan'))\n",
        "        i = (i + 1) % num_criancas\n",
        "    print(colored(\"üéâ Fim da nossa aventura m√°gica! üéâ\", 'magenta'))\n",
        "\n",
        "# Executar a fun√ß√£o principal\n",
        "criar_historia()\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOwfN32BYaBn83vylgilKKG",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}